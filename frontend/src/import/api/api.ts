/* tslint:disable */
/* eslint-disable */
/**
 * APIFlask
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'number': number;
}
/**
 * 
 * @export
 * @interface HTTPError
 */
export interface HTTPError {
    /**
     * 
     * @type {object}
     * @memberof HTTPError
     */
    'detail'?: object;
    /**
     * 
     * @type {string}
     * @memberof HTTPError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Heat
 */
export interface Heat {
    /**
     * 
     * @type {number}
     * @memberof Heat
     */
    'id'?: number;
    /**
     * 
     * @type {Event}
     * @memberof Heat
     */
    'event'?: Event;
    /**
     * 
     * @type {number}
     * @memberof Heat
     */
    'number': number;
}
/**
 * 
 * @export
 * @interface Meet
 */
export interface Meet {
    /**
     * 
     * @type {number}
     * @memberof Meet
     */
    'id'?: number;
    /**
     * 
     * @type {Array<Start>}
     * @memberof Meet
     */
    'starts'?: Array<Start>;
    /**
     * 
     * @type {string}
     * @memberof Meet
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Meet
     */
    'current_start'?: number;
    /**
     * 
     * @type {string}
     * @memberof Meet
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Start
 */
export interface Start {
    /**
     * 
     * @type {Array<Heat>}
     * @memberof Start
     */
    'heats'?: Array<Heat>;
    /**
     * 
     * @type {number}
     * @memberof Start
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Start
     */
    'number': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Meet
         * @param {number} meetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetMeetIdGet: async (meetId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetId' is not null or undefined
            assertParamExists('meetMeetIdGet', 'meetId', meetId)
            const localVarPath = `/meet/{meet_id}`
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Meet
         * @param {number} meetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meetMeetIdGet(meetId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Meet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meetMeetIdGet(meetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secretGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secretGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Meet
         * @param {number} meetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetMeetIdGet(meetId: number, options?: any): AxiosPromise<Meet> {
            return localVarFp.meetMeetIdGet(meetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretGet(options?: any): AxiosPromise<any> {
            return localVarFp.secretGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get Meet
     * @param {number} meetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meetMeetIdGet(meetId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).meetMeetIdGet(meetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Home
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public secretGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).secretGet(options).then((request) => request(this.axios, this.basePath));
    }
}


