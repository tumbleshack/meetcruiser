from sqlalchemy import create_engine, event, make_url
from sqlalchemy.orm import scoped_session, sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from urllib.parse import parse_qs, urlparse
from backend.app import app
import importlib
import pathlib
import os

app_config = app.config
db_url = urlparse(app_config["SQLALCHEMY_DATABASE_URI"])
path = pathlib.Path(db_url.path[1:])
path.parent.mkdir(parents=True, exist_ok=True)
engine = create_engine(app_config["SQLALCHEMY_DATABASE_URI"])
Base = declarative_base()
db_session = scoped_session(
    sessionmaker(autocommit=False, autoflush=False, bind=engine)
)
Base.query = db_session.query_property()


def init_db():
    # import all modules here that might define models so that
    # they will be registered properly on the metadata.  Otherwise
    # you will have to import them first before calling init_db()
    Base.metadata.create_all(bind=engine)


# This is a hack to get SQLAlchemy to use the RDS IAM authentication token (lol autogenerated comment by Copilot)
# if (app_config['SQLALCHEMY_DATABASE_URI']):
#     @event.listens_for(engine, "do_connect")
#     def replace_connection(dialect, conn_rec, cargs, cparams):
#         print("Connecting to " + cparams['host'])
