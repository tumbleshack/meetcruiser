/* tslint:disable */
/* eslint-disable */
/**
 * APIFlask
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
export const EventSexEnum = {
    Male: 'male',
    Female: 'female',
    Both: 'both'
};
export const EventRelayEnum = {
    Relay: 'relay',
    Individual: 'individual'
};
export const EventUnitEnum = {
    Meters: 'meters',
    Yards: 'yards'
};
export const EventStrokeEnum = {
    Freestyle: 'freestyle',
    Backstroke: 'backstroke',
    Breaststroke: 'breaststroke',
    Butterfly: 'butterfly',
    Medley: 'medley'
};
/**
 * ApiMeetApi - axios parameter creator
 * @export
 */
export const ApiMeetApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Meet
         * @param {number} meetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMeetGetMeet: async (meetId, options = {}) => {
            // verify required parameter 'meetId' is not null or undefined
            assertParamExists('getApiMeetGetMeet', 'meetId', meetId);
            const localVarPath = `/api/meet/{meet_id}`
                .replace(`{${"meet_id"}}`, encodeURIComponent(String(meetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ApiMeetApi - functional programming interface
 * @export
 */
export const ApiMeetApiFp = function (configuration) {
    const localVarAxiosParamCreator = ApiMeetApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get Meet
         * @param {number} meetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiMeetGetMeet(meetId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiMeetGetMeet(meetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ApiMeetApi - factory interface
 * @export
 */
export const ApiMeetApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ApiMeetApiFp(configuration);
    return {
        /**
         *
         * @summary Get Meet
         * @param {number} meetId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMeetGetMeet(meetId, options) {
            return localVarFp.getApiMeetGetMeet(meetId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ApiMeetApi - object-oriented interface
 * @export
 * @class ApiMeetApi
 * @extends {BaseAPI}
 */
export class ApiMeetApi extends BaseAPI {
    /**
     *
     * @summary Get Meet
     * @param {number} meetId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiMeetApi
     */
    getApiMeetGetMeet(meetId, options) {
        return ApiMeetApiFp(this.configuration).getApiMeetGetMeet(meetId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ApiTestApi - axios parameter creator
 * @export
 */
export const ApiTestApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTestData: async (options = {}) => {
            const localVarPath = `/api/test/secret`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTestHome: async (options = {}) => {
            const localVarPath = `/api/test/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ApiTestApi - functional programming interface
 * @export
 */
export const ApiTestApiFp = function (configuration) {
    const localVarAxiosParamCreator = ApiTestApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTestData(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTestData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiTestHome(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiTestHome(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ApiTestApi - factory interface
 * @export
 */
export const ApiTestApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ApiTestApiFp(configuration);
    return {
        /**
         *
         * @summary Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTestData(options) {
            return localVarFp.getApiTestData(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Home
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiTestHome(options) {
            return localVarFp.getApiTestHome(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ApiTestApi - object-oriented interface
 * @export
 * @class ApiTestApi
 * @extends {BaseAPI}
 */
export class ApiTestApi extends BaseAPI {
    /**
     *
     * @summary Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiTestApi
     */
    getApiTestData(options) {
        return ApiTestApiFp(this.configuration).getApiTestData(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Home
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiTestApi
     */
    getApiTestHome(options) {
        return ApiTestApiFp(this.configuration).getApiTestHome(options).then((request) => request(this.axios, this.basePath));
    }
}
